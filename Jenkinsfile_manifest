#!groovy

@Library('jenkins-shared-library')

pipeline {
    agent any

    parameters {
        string(name: 'manifest', defaultValue: 'manifest.default.json', description: 'Manifest from Git source')
    }

    stages {
        stage('Get Code') {
            agent {
                label "config_node"
            }
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('Read Config') {
            agent {
                label "config_node"
            }
            steps {
                deployWithManifest([
                    manifestfile: "${params.manifest}"
                ])
            }
        }
        stage('Launch Infrastructure Pipeline') {
            agent {
                label "config_node"
            }
            steps {
                def manifest = readJSON file: "${params.manifest}"
                def job
                if (manifest.infrastructure.provider == "aws") {
                    for (def ep_type : manifest.infrastructure.endpoint_types) {
                        if (ep_type.type == 'rhel') {
                            writeFile file: "${manifest.terraform.rhel.path}/input.tfvars.json" text: "{"
                            writeFile file: "${manifest.terraform.rhel.path}/input.tfvars.json" text: "rhel_inst_count: ${ep_type.count}"
                            writeFile file: "${manifest.terraform.rhel.path}/input.tfvars.json" text: "ansible_user: ${ep_type.user}"
                            writeFile file: "${manifest.terraform.rhel.path}/input.tfvars.json" text: "}"
                            job = build job: "aws_rhel_infra_pipeline",
                            parameters: [
                                [$class: 'StringParameterValue', name: 'param_aws_creds', '${manifest.infrastructure.credentialsId}']
                                [$class: 'StringParameterValue', name: 'param_ssh_key', '${ep_type.credentialsId}']
                                [$class: 'StringParameterValue', name: 'input_vars_file', '${manifest.terraform.rhel.path}/input.tfvars']
                            ]
                            break
                        }
                    }
                }
            }
        }
    }
}